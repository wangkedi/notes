* git 参考手册
** Git基础
   三种状态：已提交(committed) 已修改(modified) 已暂存(staged)
   三个工作区域：工作目录 暂存区 本地数据目录
   基本的git工作流程
       1. 修改文件
       2. 对修改的文件快照，保存到暂存区
       3. 提交更新，把保存在暂存区的文件转存到本地数目录
*** Git安装
    1. 安装依赖库
       yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel
    2. 安装git
       yum install git-core
*** 运行配置
     - /etc/gitconfig文件 :: 系统中对所有用户都普遍适用的配置。git config时用 --system选项 读写的就是这个文件
     - ~/.gitconfig :: 用户目录下的配置文件适用于该用户。git config时用 --global选项 读写的就是这个文件
     - .git/config :: 当前项目git目录中的配置文件，仅对当前项目有效。
     每一个级别的配置都会覆盖上层的相同配置

     1. 配置用户信息
        git config --global user.name "wangkedi"
        git config --global user.email "wangkedi@gmail.com"
     2. 文本编辑器
        git config --global core.editor emacs
     3. 差异分析工具
        git config --global merge.tool vimdiff
        git可以理解kdiff3 tkdiff meld xxdiff emerge vimdiff gvimdiff ecmerge opendiff等差异分析工具的输出信息
     4. 查看配置信息
        git config --list
*** 获取帮助
    git help <cmd>
*** 项目初始化
    1. 从当前目录初始化
       git init
    2. 从仓库克隆
       git clone git://github.com/schacon/grit.git 在当前目录创建一个grit目录，其中内含一个.git的目录
       如果需要自己重新定义项目名
       git clone git://github.com/schacon/grit.git mygrit
    git支持的协议 git:// http:// ssh
*** 更新到仓库
    - 检查当前文件状态
      git status
    - 跟踪新文件
      git add
    - 忽略某些文件
      创建 .gitignore文件
      文件.gitignore的格式规范
      + 所有的空行或者以注释符号#开头的行都会被git忽略
      + 可以使用标准的glob模式匹配
        glob模式 :: 星号(*)匹配零个或多个任意字符 [abc]匹配任何一个列在方括号中的字符 问号(?) 匹配任意一个字符 [0-9]匹配范围内的字符
      + 匹配模式最后跟反斜杠(/)说明要忽略的是目录
      + 要忽略指定模式以外的文件或目录，可以在模式前加 ！ 取反。
    - 文件比较
      git diff 不加参数 :: 比较的是工作目录当前文件盒暂存区快照间的差异，也就是修改以后还没有暂存的文件的变化内容。
      git diff --cached :: 比较已经暂存的文件和上次提交时的快照之间的差异
    - 提交更新
        git commit :: 单个文件启动编辑器输入提交说明
        git commit -m "" :: 此次提交统一提交说明
    - 跳过使用暂存区域
      git commit -a :: git会自动把所有已经跟踪过的文件暂存起来并一起提交，从而跳过git add步骤
    - 移除文件
      如果简单的从工作目录删除文件就会在 changed but not updated部分看到
      然后运行 git rm 记录此次移除文件的操作，最后提交的时候，该文件就不再纳入版本管理。
      git -f :: 删除前修改过并且已经放到暂存区域，必须使用此命令强制删除。防止误删除文件后丢失修改的内容。
      git rm --cached :: 文件从暂存区 git仓库删除，但是在工作区域保留
    - 移动文件
      不像其他vcs系统，git不跟踪文件移动操作，
      git mv file_from file_to :: 文件改名
    - 查看历史
      git log :: 按提交时间列出所有的更新，最近的更新在最上面
      git log -p ::显示每次提交的内容差异 后面跟 -2 仅显示最近的两次更新
      git log --pretty=oneline :: 将每个提交放在一行显示，另外还有 short full fuller参数可用。
      git log --pretty=format :: 可以定制要显示的格式 例如 git log --pretty=format:"%h - %an - %s" 具体占位符查阅资料
      git log -(n) :: 显示最近的n条提交
      git log --since :: 显示指定时间之后的提交
      git log --until :: 显示指定日期之前的提交
      git log --author :: 显示指定作者相关的提交
      git --committer :: 显示指定提交者相关的提交
    - 撤销操作
      + 修改最后一次提交
        有时候提交完了。发现漏掉了几个文件，或者提交信息写错了。要撤销刚才的提交操作。可以使用 git commit --amend
        此命令将使用当前暂存区快照提交。如果刚才提交没有做任何改动。直接执行此命令。相当于有机会重新编辑提交说明
      + 取消已暂存的文件
        git reset HEAD <file>... 取消暂存区指定的文件。
      + 取消对文件的修改
        git checkout -- <file> :: 文件进行过git add以后再进行修改，然后执行git checkout命令就取消git add后的修改内容。也就是用暂存区的文件覆盖工作区的文件。此命令慎用！！！
      记住！！！所有已提交的文件都可以找回，没有提交的文件丢失以后没有办法找回。
    - 远程仓库的使用
      + 查看当前的远程仓库
        git remote :: 列出远程库的简短名字。在克隆完某个项目后，至少可以看到一个名为origin的远程库。git默认使用这个名字来标识你所克隆的原始仓库。
        git remote -v :: 列出详细的远程克隆地址。
      + 添加远程仓库
        git remote add [shortname] [url]
      + 从远程仓库抓取数据
        git fetch [remote-name] :: 此命令会到远程仓库中拉取所有你本地仓库还没有的数据。运行完成后，可以在本地访问该远程仓库的所有分支。并将其中某个分支合并到本地。有一点非常重要，fetch命令只是将远程仓库的数据拉到本地仓库。并不自动
        合并到当前的工作分支。只有当你确实需要合并的时候，手工合并。
      + 推送数据到远程仓库
        git push [remote-name] [branch-name]
      + 查看远程仓库信息
        git remote show [remote-name] 查看某个远程仓库的详细信息。
      + 远程仓库的删除和重命名
        git remote [oldname] [newname] :: 远程仓库重命名
        git remote rm [remotename] :: 删除远程仓库
    - 打标签
      git tag :: 列出已有的标签
      
      
** Git分支
** 服务器上的Git
** 分布式Git
** Git工具